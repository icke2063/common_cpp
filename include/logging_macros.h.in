/**
 * @file   @LOGGING_PREFIX@_logging.h
 * @Author icke2063
 * @date   26.03.2015
 *
 * Copyright Â© 2013 icke2063 <icke2063@gmail.com>
 *
 * This software is free; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This template file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
 
#ifndef @LOGGING_PREFIX@_LOGGING_H_
#define @LOGGING_PREFIX@_LOGGING_H_

#include <syslog.h>
#include <stdio.h>
#include "logging.h"

#ifdef __cplusplus
extern "C" {
#endif

extern struct logging @LOGGING_PREFIX@_handle;

#define @LOGGING_PREFIX@_SET_LOG_FN(fn)			@LOGGING_PREFIX@_handle.log_fn = fn;
#define @LOGGING_PREFIX@_SET_LOG_LEVEL(level)	@LOGGING_PREFIX@_handle.loglevel = level;

#define @LOGGING_PREFIX@_GET_LOG_FN				@LOGGING_PREFIX@_handle.log_fn
#define @LOGGING_PREFIX@_GET_LOG_LEVEL			@LOGGING_PREFIX@_handle.loglevel

/* syslog specific level
 * LOG_EMERG	0
 * LOG_ALERT	1	
 * LOG_CRIT		2	
 * LOG_ERR		3
 * LOG_WARNING	4
 * LOG_NOTICE	5
 * LOG_INFO		6
 * LOG_DEBUG	7	
 */

#define @LOGGING_PREFIX@_EMERG_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_EMERG, __FILE__, __LINE__, __FUNCTION__, ## arg)
#define @LOGGING_PREFIX@_ALERT_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_ALERT, __FILE__, __LINE__, __FUNCTION__, ## arg)
#define @LOGGING_PREFIX@_CRIT_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_CRIT, __FILE__, __LINE__, __FUNCTION__, ## arg)
#define @LOGGING_PREFIX@_ERROR_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_ERR, __FILE__, __LINE__, __FUNCTION__, ## arg)
#define @LOGGING_PREFIX@_WARN_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_WARNING, __FILE__, __LINE__, __FUNCTION__, ## arg)
#define @LOGGING_PREFIX@_NOTICE_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_NOTICE, __FILE__, __LINE__, __FUNCTION__, ## arg)
#define @LOGGING_PREFIX@_INFO_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_INFO, __FILE__, __LINE__, __FUNCTION__, ## arg)
#define @LOGGING_PREFIX@_DEBUG_WRITE(arg...) write_to_log(&@LOGGING_PREFIX@_handle, LOG_DEBUG, __FILE__, __LINE__, __FUNCTION__, ## arg)


//void @LOGGING_PREFIX@_logging(int loglevel, const char *file, int line, const char *fn,
//		const char *format, va_list args);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* @LOGGING_PREFIX@_@_ISLOGGING_H_ */



